{
  "name": "scraps_metal",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const filters = $('sites_config').first().json.search_config.linkEtiquetteFilter;\nconst results = [];\n\nfor (const item of items) {\n  const response = item.json; // Google CSE response\n  \n  if (response.items) {\n    for (const r of response.items) {\n      const textToSearch = [\n        r.link || \"\",\n        r.title || \"\",\n        r.snippet || \"\"\n      ].join(\" \").toLowerCase();\n\n      const matchedFilter = filters.find(f => textToSearch.includes(f.toLowerCase()));\n\n      if (matchedFilter) {\n        // Detect website from displayLink\n        const website = r.displayLink.replace('www.', '').split('.')[0];\n        \n        // Extract keyword from search terms in the response\n        const searchTerms = response.queries?.request?.[0]?.searchTerms || \"\";\n        const keywordMatch = searchTerms.match(/^(\\w+)\\s+/);\n        const keyword = keywordMatch ? keywordMatch[1] : \"unknown\";\n        \n        // Extract company and location info from snippet\n        let company = \"Multiple Companies\";\n        let location = \"\";\n        \n        if (website === \"indeed\") {\n          // Extract company names from Indeed snippets\n          const companyMatches = r.snippet.match(/([A-Z][a-zA-Z\\s&]+)\\.\\s*([A-Z][a-zA-Z\\s,]+)/);\n          if (companyMatches) {\n            company = companyMatches[1].trim();\n            location = companyMatches[2].trim();\n          }\n          \n          // Alternative pattern for Indeed\n          const altCompanyMatch = r.snippet.match(/(Trexquant Investment|Lockheed Martin|Anduril Industries|AG Technologies|Google)/);\n          if (altCompanyMatch) {\n            company = altCompanyMatch[1];\n          }\n        } else if (website === \"linkedin\") {\n          // LinkedIn company extraction (from previous code)\n          const companyMatch = r.snippet.match(/([A-Z][a-zA-Z\\s&]+)\\.\\s*(United States|Remote|Actively Hiring)/);\n          company = companyMatch ? companyMatch[1].trim() : \"LinkedIn\";\n        }\n        \n        // Clean job title based on website\n        let cleanTitle = r.title;\n        if (website === \"indeed\") {\n          cleanTitle = r.title\n            .replace(/\\s*\\|\\s*Indeed.*$/, '')\n            .replace(/,\\s*Employment.*$/, '')\n            .replace(/\\s*Jobs,\\s*Employment.*$/, '')\n            .trim();\n        } else if (website === \"linkedin\") {\n          cleanTitle = r.title\n            .replace(/\\s*\\|\\s*LinkedIn.*$/, '')\n            .replace(/^\\d+,?\\d*\\+?\\s*/, '')\n            .trim();\n        }\n        \n        // Extract salary info if available\n        const salaryMatch = r.snippet.match(/\\$[\\d,]+/);\n        const salary = salaryMatch ? salaryMatch[0] : null;\n\n        results.push({\n          json: {\n            website: website,\n            keyword: keyword,\n            company: company,\n            job_title: cleanTitle,\n            link: r.link,\n            snippet: r.snippet,\n            location: location || \"Various Locations\",\n            salary: salary,\n            matchedFilter: matchedFilter,\n            source: \"google_cse\",\n            totalResults: response.searchInformation?.totalResults || \"0\"\n          }\n        });\n      }\n    }\n  }\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        16,
        688
      ],
      "id": "9f7de7c2-805c-4083-9b14-648f02ce5ab7",
      "name": "job_listing_extractor",
      "disabled": true
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/customsearch/v1?key={{KEY}}&cx={{CSE}}&q={{encodeURIComponent($json.keyword + ' job OR jobs OR career OR hiring site:' + $json.baseUrl.replace(/^https?:\\/\\//, '') + ($json.searchPathHint || ''))}}&num=10\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        848
      ],
      "id": "2ec1bea8-d5b3-4814-a59a-82dd1ef3da59",
      "name": "HTTP Request",
      "notesInFlow": true,
      "retryOnFail": true,
      "waitBetweenTries": 300,
      "disabled": true,
      "onError": "continueRegularOutput",
      "notes": "Requires API key from google cloud and an ID from a CSE"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -240,
        784
      ],
      "id": "1eb1f391-d59d-490d-8962-d8064861d2a2",
      "name": "Loop Over Items",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// --- CONFIG ---\nconst processFirstOnly = true; // true = only first site, false = all\n\n// keywords and searches (keeping your working references)\nconst keywords = $('sites_config').first().json.search_config.search_keywords;\nconst searches = $input.first().json.sites;\n\n// --- SAFETY CHECK ---\nif (!searches || searches.length === 0) {\n    return [{ json: { error: \"No 'searches' array found in input.\" } }];\n}\n\nconst output = [];\n\n// Optionally only process the first site\nconst targetSites = processFirstOnly ? [searches[0]] : searches;\n\nfor (const site of targetSites) {\n    if (!site || !site.baseUrl || !site.name) continue;\n\n    const baseDomain = site.baseUrl.replace(/^https?:\\/\\//, '');\n    const searchPath = site.searchPathHint || '';\n\n    for (const kw of keywords) {\n        const query = `${kw} site:${baseDomain}${searchPath}`;\n        const encodedQuery = encodeURIComponent(query);\n\n        output.push({\n            json: {\n                websiteName: site.name,\n                baseUrl: site.baseUrl,\n                keyword: kw,\n                query,\n                encodedQuery,\n                // Access the nested fields correctly\n                disallowedPaths: (site.restrictions && site.restrictions.disallowedPaths) || [],\n                apiDocs: (site.alternatives && site.alternatives.apiDocs) || null\n            }\n        });\n    }\n}\n\n// --- If no sites are processed ---\nif (output.length === 0) {\n    return [{\n        json: { message: \"No sites processed — check input or configuration.\" }\n    }];\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        784
      ],
      "id": "1d69b5c1-8b84-4213-b572-3e7c07a039de",
      "name": "pair_web_keyword",
      "notesInFlow": true,
      "retryOnFail": true,
      "waitBetweenTries": 200,
      "alwaysOutputData": true,
      "disabled": true,
      "notes": "const processFirstOnly = true; // set to false if you want ALL websites"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1456,
        368
      ],
      "id": "5fbcc0a6-eb6e-4327-a860-3a036e4a7e67",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n    \"sheet_config\": {\n        \"doc_id\": \"\",\n        \"job_sheet_name\": \"\"\n    },\n    \"search_config\": {\n        \"maxPagesPerQuery\": 3,\n        \"maxLinkExtractor\":1,\n        \"batchSizeLoop\":1,\n        \"pageLanguage\":[\n            \"/en/\"\n        ],\n        \"linkEtiquetteFilter\": [\n            \"/job\",\n            \"/jobs\",\n            \"/job-detail\",\n            \"/job-listings\",\n            \"/jobdetails\",\n            \"/job-openings\",\n            \"/job-opening\",\n            \"/job-description\",\n            \"/jobdesc\",\n            \"/jobposting\",\n            \"/job-posting\",\n            \"/jobad\",\n            \"/job-ad\",\n            \"/offer\",\n            \"/offers\",\n            \"/job-offer\",\n            \"/job-offers\",\n            \"/careers\",\n            \"/career\",\n            \"/career-opportunities\",\n            \"/employment\",\n            \"/opportunity\",\n            \"/opportunities\",\n            \"/positions\",\n            \"/position\",\n            \"/vacancies\",\n            \"/vacancy\",\n            \"/viewjob\",\n            \"/jobs-guest\",\n            \"/recruitment\",\n            \"/hiring\",\n            \"/apply\",\n            \"/application\"\n        ],\n        \"search_keywords\": [\n            \"software\",\n            \"developer\",\n            \"data\",\n            \"ai\",\n            \"engineer\",\n            \"engineering\",\n            \"analyst\",\n            \"junior\",\n            \"graduate\",\n            \"consultant\",\n            \"associate\",\n            \"trainee\",\n            \"advisory\",\n            \"advisor\",\n            \"global\",\n            \"ux\",\n            \"ui\"\n        ],\n        \"ban_filter\": [\n            \"intern\",\n            \"internship\",\n            \"student\",\n            \"working student\",\n            \"thesis\",\n            \"dissertation\",\n            \"unpaid\",\n            \"volunteer\",\n            \"sales\",\n            \"marketing\",\n            \"business\",\n            \"account\",\n            \"financial\",\n            \"finance\",\n            \"investment\",\n            \"accounting\",\n            \"hr\",\n            \"customer\",\n            \"administrative\",\n            \"legal\",\n            \"compliance\",\n            \"supply chain\",\n            \"procurement\",\n            \"vendor management\",\n            \"content writer\",\n            \"copywriter\",\n            \"designer\",\n            \"social media\",\n            \"pr specialist\"\n        ]\n    },\n    \"sites\": [\n        {\n            \"name\": \"jobteaser\",\n            \"baseUrl\": \"https://www.jobteaser.com\",\n            \"searchTemplate\": \"https://assets-cf.jobteaser.com/sitemaps/sitemap.xml\",\n            \"robotsTxt\": \"https://www.jobteaser.com/robots.txt\",\n            \"useRenderer\": false,\n            \"allowedToScrape\": true,\n            \"note\": \"JobTeaser’s robots.txt allows crawling of sitemaps and public job pages. Use the sitemap to discover jobs instead of blocked search endpoints.\",\n            \"selectors\": {\n                \"card\": \".job-card\",\n                \"title\": \".job-title\",\n                \"link\": \"a.job-link\",\n                \"company\": \".company\"\n            },\n            \"policyReferences\": {\n                \"robotsTxt\": \"https://www.jobteaser.com/robots.txt\",\n                \"termsOfService\": \"https://www.jobteaser.com/en/legal\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/cdn-cgi/\",\n                    \"*/apply_to_extern_url\",\n                    \"/*/companies/job-offers/*?locale=*\",\n                    \"/*/job-offers?locale=*&page=*&*\",\n                    \"/*?page=*&*\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Scraping beyond allowed sitemap/job pages\",\n                    \"Accessing personal applicant data\",\n                    \"High-volume or commercial use without permission\"\n                ]\n            },\n            \"headers\": {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117 Safari/537.36\",\n                \"Referer\": \"https://www.jobteaser.com/\"\n            },\n            \"sitemapPattern\": \"job_ads_sitemap\"\n        },\n        {\n            \"name\": \"make-it-in-germany\",\n            \"baseUrl\": \"https://www.make-it-in-germany.com\",\n            \"searchTemplate\": \"https://www.make-it-in-germany.com/en/working-in-germany/job-listings\",\n            \"robotsTxt\": \"https://www.make-it-in-germany.com/robots.txt\",\n            \"useRenderer\": false,\n            \"allowedToScrape\": true,\n            \"note\": \"Official German government portal for skilled workers. Use the sitemap to discover job listings safely.\",\n            \"selectors\": {\n                \"card\": \".job-listing-card\",\n                \"title\": \".job-listing-title\",\n                \"link\": \"a.job-listing-link\",\n                \"company\": \".job-listing-company\",\n                \"location\": \".job-listing-location\"\n            },\n            \"policyReferences\": {\n                \"robotsTxt\": \"https://www.make-it-in-germany.com/robots.txt\",\n                \"termsOfService\": \"https://www.make-it-in-germany.com/en/legal\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/typo3/\",\n                    \"/uploads/pdfs/\",\n                    \"/*?id=*\",\n                    \"/*?eID=*\",\n                    \"/*tx_solr[q]*\",\n                    \"/*tx_solr[filter]*\",\n                    \"/*tx_solr[sort]*\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Scraping beyond allowed sitemap/job pages\",\n                    \"Accessing non-public or personal applicant data\",\n                    \"High-volume or commercial use without explicit permission\"\n                ]\n            },\n            \"headers\": {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117 Safari/537.36\",\n                \"Referer\": \"https://www.make-it-in-germany.com/\"\n            },\n            \"sitemapPattern\": \"job-listings\"\n        },\n\n        {\n            \"name\": \"linkedin\",\n            \"baseUrl\": \"https://www.linkedin.com\",\n            \"searchPathHint\": \"/jobs/search/\",\n            \"allowedToScrape\": false,\n            \"note\": \"LinkedIn’s Terms of Service explicitly forbids scraping or using automated agents without express written permission. Use official APIs or licensed partners instead.\",\n            \"policyReferences\": {\n                \"termsOfService\": \"https://www.linkedin.com/legal/user-agreement\",\n                \"robotsTxt\": \"https://www.linkedin.com/robots.txt\"\n            },\n            \"alternatives\": {\n                \"apiDocs\": \"https://learn.microsoft.com/en-us/linkedin/\",\n                \"partnerProgram\": \"https://business.linkedin.com/talent-solutions\",\n                \"comment\": \"If you need job data, request access through LinkedIn's API or use official data partners. Public scraping (including /jobs/search) is prohibited.\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/jobs\",\n                    \"/jobs/search\",\n                    \"/in\",\n                    \"/company\",\n                    \"/profile\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Using bots or scrapers to extract job or profile data without permission\",\n                    \"Bulk downloading or indexing of listings or user profiles\",\n                    \"Using data for machine learning / AI model training without explicit license\"\n                ]\n            }\n        },\n        {\n            \"name\": \"indeed\",\n            \"baseUrl\": \"https://www.indeed.com\",\n            \"searchPathHint\": \"/jobs\",\n            \"searchTemplate\": \"https://www.indeed.com/jobs?q={{keyword}}&l=Remote&start={{pageOffset}}\",\n            \"useRenderer\": false,\n            \"allowedToScrape\": false,\n            \"note\": \"Indeed’s Terms of Service explicitly forbids scraping or using automated agents without express written permission. Use official partnerships or APIs instead.\",\n            \"policyReferences\": {\n                \"termsOfService\": \"https://www.indeed.com/legal\",\n                \"robotsTxt\": \"https://www.indeed.com/robots.txt\"\n            },\n            \"alternatives\": {\n                \"apiDocs\": \"https://docs.indeed.com/job-sync-api/job-sync-api-guide\",\n                \"partnerApi\": \"Check if Indeed offers localized API or partnerships in your region\",\n                \"jobSyncProgram\": \"Indeed's synchronization or job posting partnership options if you are an ATS or employer\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/jobs\",\n                    \"/viewjob\",\n                    \"/cmp\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Using bots or scrapers to extract job listing data without permission\",\n                    \"Bulk downloading / indexing of listings\",\n                    \"Using data for machine learning / AI model training without explicit license\"\n                ]\n            }\n        },\n        {\n            \"name\": \"glassdoor\",\n            \"baseUrl\": \"https://www.glassdoor.com\",\n            \"searchPathHint\": \"/Job\",\n            \"searchTemplate\": \"https://www.glassdoor.com/Job/jobs.htm?sc.keyword={{keyword}}&locT=&locId=&locKeyword=&page={{page}}\",\n            \"useRenderer\": true,\n            \"allowedToScrape\": false,\n            \"note\": \"Glassdoor's robots.txt disallows crawling of job listings and other key pages. Their Terms of Use prohibit scraping or using automated agents without explicit permission. Use official APIs or partner access instead.\",\n            \"policyReferences\": {\n                \"termsOfService\": \"https://www.glassdoor.com/about/terms/\",\n                \"robotsTxt\": \"https://www.glassdoor.com/robots.txt\"\n            },\n            \"alternatives\": {\n                \"apiDocs\": \"https://www.glassdoor.com/developer/index.htm\",\n                \"api\": \"Glassdoor provides an official API for partners. Visit https://www.glassdoor.com/developer/index.htm for more information.\",\n                \"partnerProgram\": \"Consider joining Glassdoor's partner program to access job data legally. Details can be found at https://www.glassdoor.com/partners/\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/job-listing/*\",\n                    \"/Job/*\",\n                    \"/search/*\",\n                    \"/Reviews/*\",\n                    \"/profile/*\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Using bots or scrapers to extract job listing data without permission\",\n                    \"Bulk downloading or indexing of job listings\",\n                    \"Using data for machine learning or AI model training without explicit license\"\n                ]\n            }\n        },\n        {\n            \"name\": \"adzuna\",\n            \"baseUrl\": \"https://www.adzuna.de\",\n            \"searchPathHint\": \"/search\",\n            \"searchTemplate\": \"https://www.adzuna.de/jobs/{some-path}?q={{keyword}}&page={{page}}\",\n            \"useRenderer\": false,\n            \"allowedToScrape\": false,\n            \"note\": \"Adzuna provides an API; scraping may violate their terms and conditions and robots.txt.\",\n            \"policyReferences\": {\n                \"termsOfService\": \"https://www.adzuna.de/terms-and-conditions.html\",\n                \"robotsTxt\": \"https://www.adzuna.de/robots.txt\"\n            },\n            \"alternatives\": {\n                \"apiDocs\": \"https://www.adzuna.de/api\",\n                \"api\": \"Adzuna offers an API for partners. Visit https://www.adzuna.de/api for more information.\",\n                \"partnerProgram\": \"Consider joining Adzuna's partner program to access job data legally. Details can be found at https://www.adzuna.de/partners/\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/jobs\",\n                    \"/search\",\n                    \"/job-listing/*\",\n                    \"/job/*\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Using bots or scrapers to extract job listing data without permission\",\n                    \"Bulk downloading or indexing of job listings\",\n                    \"Using data for machine learning / AI model training without explicit license\"\n                ]\n            }\n        },\n        {\n            \"name\": \"stepstone\",\n            \"baseUrl\": \"https://www.stepstone.de\",\n            \"searchPathHint\": \"/jobs\",\n            \"searchTemplate\": \"https://www.stepstone.de/job-search?ke={{keyword}}&page={{page}}\",\n            \"useRenderer\": false,\n            \"allowedToScrape\": false,\n            \"note\": \"StepStone's robots.txt disallows crawling of job listings and other key pages. Their Terms of Use prohibit scraping or using automated agents without explicit permission. Use official APIs or partner access instead.\",\n            \"policyReferences\": {\n                \"termsOfService\": \"https://www.stepstone.de/ueber-stepstone/allgemeine-geschaeftsbedingungen-vom-27-april-2022/\",\n                \"robotsTxt\": \"https://www.stepstone.de/robots.txt\"\n            },\n            \"alternatives\": {\n                \"apiDocs\": \"https://www.stepstone.de/partners\",\n                \"api\": \"StepStone provides an API for partners. Visit https://www.stepstone.de/partners for more information.\",\n                \"partnerProgram\": \"Consider joining StepStone's partner program to access job data legally. Details can be found at https://www.stepstone.de/partners\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/job-listing/*\",\n                    \"/Job/*\",\n                    \"/search/*\",\n                    \"/Reviews/*\",\n                    \"/profile/*\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Using bots or scrapers to extract job listing data without permission\",\n                    \"Bulk downloading or indexing of job listings\",\n                    \"Using data for machine learning or AI model training without explicit license\"\n                ]\n            }\n        },\n        {\n            \"name\": \"greenhouse\",\n            \"baseUrl\": \"https://boards.greenhouse.io\",\n            \"searchPathHint\": \"/jobs\",\n            \"searchTemplate\": \"https://boards.greenhouse.io/search?utf8=%E2%9C%93&query={{keyword}}&page={{page}}\",\n            \"useRenderer\": false,\n            \"allowedToScrape\": false,\n            \"note\": \"Greenhouse's robots.txt disallows crawling of many internal paths. Scraping may violate their terms of service. Use their Job Board API or partner access instead.\",\n            \"policyReferences\": {\n                \"termsOfService\": \"https://www.greenhouse.com/legal\",\n                \"robotsTxt\": \"https://support.greenhouse.io/robots.txt\"\n            },\n            \"alternatives\": {\n                \"apiDocs\": \"https://developers.greenhouse.io/job-board.html\",\n                \"api\": \"Greenhouse offers a Job Board API for partners. Visit https://developers.greenhouse.io/job-board.html for more information.\",\n                \"partnerProgram\": \"Consider joining Greenhouse's partner program to access job data legally. Details can be found at https://integrations.greenhouse.com/\"\n            },\n            \"restrictions\": {\n                \"disallowedPaths\": [\n                    \"/search\",\n                    \"/jobs\",\n                    \"/job-listing/*\",\n                    \"/job/*\",\n                    \"/companies/*\"\n                ],\n                \"prohibitedActivities\": [\n                    \"Using bots or scrapers to extract job listing data without permission\",\n                    \"Bulk downloading or indexing of job listings\",\n                    \"Using data for machine learning or AI model training without explicit license\"\n                ]\n            }\n        }\n    ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1264,
        368
      ],
      "id": "4f2caad6-f5d1-4a1c-b45c-864263e80eed",
      "name": "sites_config",
      "retryOnFail": true,
      "waitBetweenTries": 500,
      "notesInFlow": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Get the JSON from the previous node\nconst sites = $input.first().json.sites;\n\n// Separate into two arrays\nconst allowed = [];\nconst notAllowed = [];\n\nsites.forEach(site => {\n  if (site.allowedToScrape) {\n    allowed.push(site);\n  } else {\n    notAllowed.push(site);\n  }\n});\n\n// Return two outputs with boolean field\nreturn [\n  { json: { allowedToScrape: true, sites: allowed } },\n  { json: { allowedToScrape: false, sites: notAllowed } }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        368
      ],
      "id": "0e243d19-ed1c-4a7b-ac4b-b67d0de78ad0",
      "name": "seggregated",
      "retryOnFail": true,
      "waitBetweenTries": 100,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ee0b7f9f-bd88-4c04-ab07-56ed74d669d8",
              "leftValue": "={{ $json.allowedToScrape }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -912,
        368
      ],
      "id": "465db51e-ad8e-4c07-ba46-cf31556fb9e4",
      "name": "If allowed to",
      "retryOnFail": true,
      "waitBetweenTries": 500,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Get input JSON\nconst input = items[0].json;\n\n// Get allowed sites\nconst allowedSites = input.sites || [];\n\n// Get from sites_config node\nconst keywords = $('sites_config').first().json.search_config.search_keywords || [];\nconst filters= $('sites_config').first().json.search_config.linkEtiquetteFilter || [];\nconst language = $('sites_config').first().json.search_config.pageLanguage || [];\nconst batch_size = $('sites_config').first().json.search_config.batchSizeJobLinkLoop || 1;\n\nconst results = [];\n\nfor (const site of allowedSites) {\n    let urls = [];\n\n    if (site.searchTemplate && site.searchTemplate.includes('sitemap')) {\n        // Sitemap-based site: only one URL needed\n        urls.push(site.searchTemplate);\n    } else {\n        // Paginated searchTemplate: build URLs per page\n        const maxPages = input.search_config?.maxPagesPerQuery || 1;\n        for (let page = 1; page <= maxPages; page++) {\n            const url = site.searchTemplate\n                ? site.searchTemplate\n                    .replace('{{keyword}}', '') // leave keyword blank\n                    .replace('{{page}}', page)\n                    .replace('{{pageOffset}}', (page - 1) * 10)\n                : site.baseUrl;\n            urls.push(url);\n        }\n    }\n\n    results.push({\n        siteName: site.name,\n        urls: urls,\n        useRenderer: !!site.useRenderer,\n        headers: site.headers\n    });\n}\n\n// Return final structure\nreturn [\n    {\n        json: {\n            caveats:{\n              batch_size: batch_size,\n              filters: filters,\n              language: language,\n              keywords: keywords,\n            },\n            results: results\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        240
      ],
      "id": "44f17390-f591-42dc-bfdc-a6c280c6da58",
      "name": "search_maker",
      "retryOnFail": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const data = items[0].json;\nconst out = [];\n\nfor (const site of data.results) {\n  for (const url of site.urls) {\n    out.push({\n      json: {\n        siteName: site.siteName,\n        url: url,\n        headers: site.headers,\n        useRenderer: site.useRenderer\n      }\n    });\n  }\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -512,
        240
      ],
      "id": "e7033aaf-6840-4ad7-a0f0-685714125231",
      "name": "splitter",
      "retryOnFail": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "redirect": {},
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -112,
        256
      ],
      "id": "f3ab5c3a-d2d8-4f08-8ec9-0b138498b84a",
      "name": "Request sitemap",
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a7e3495-5727-4bf3-bd54-334bb405ffeb",
              "leftValue": "={{ $json.data }}",
              "rightValue": "<urlset",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "626eae63-0977-4a7a-8c4c-69e035f71845",
              "leftValue": "={{ $json.data }}",
              "rightValue": "<sitemapindex",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "f1667e2a-6047-4a89-8ea4-ef9d441fa24a",
              "leftValue": "={{ $json.data }}",
              "rightValue": "<\\?xml",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -112,
        112
      ],
      "id": "3e8164c5-6bff-4ea0-b3e8-a3b95b10a734",
      "name": "If xml or no",
      "alwaysOutputData": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -304,
        240
      ],
      "id": "48a78060-96da-424d-a056-94a75351eea6",
      "name": "Loop",
      "retryOnFail": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        112,
        0
      ],
      "id": "6a247e16-9638-4859-85df-f507f326249d",
      "name": "XML to JSON1",
      "retryOnFail": true,
      "alwaysOutputData": true,
      "waitBetweenTries": 100
    },
    {
      "parameters": {
        "jsCode": "// Get input (assuming it's the JSON parsed from sitemap XML)\nconst sitemapData = items[0].json;\n\n// Navigate safely to the array of sitemaps\nconst sitemaps = sitemapData.sitemapindex?.sitemap || [];\n\n// Filter only job ad related sitemaps\nconst jobSitemaps = sitemaps.filter(entry => entry.loc.includes('job_ads_sitemap'));\n\n// Map each to a separate output item\nreturn jobSitemaps.map(entry => ({\n  json: {\n    url: entry.loc,\n    lastmod: entry.lastmod || null\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        0
      ],
      "id": "8dff4ec8-041b-48b4-9f89-4edbee5122ca",
      "name": "job_sitemap_extractor1",
      "retryOnFail": true,
      "waitBetweenTries": 100,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        512,
        0
      ],
      "id": "e8a3b7fc-259e-4b7f-aac0-e03069010582",
      "name": "Loop1",
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "redirect": {},
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        688,
        16
      ],
      "id": "a6c0110c-aba3-401f-8133-90f3ba0bdde2",
      "name": "HTTP Request1",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "alwaysOutputData": true,
      "notesInFlow": true,
      "executeOnce": true,
      "notes": "FOR NOW EXECUTES ONCE ONLY"
    },
    {
      "parameters": {
        "jsCode": "// This node parses both XML sitemaps and normal HTML pages safely.\n// If <loc> tags are found, it extracts them (XML sitemap mode).\n// Otherwise, it falls back to extracting <a href=\"...\"> links (HTML mode).\n\nconst xmlData = items[0].json.data || '';\nconst results = [];\nconst maxLinks = 500; // Limit to prevent memory overload\n\nlet matches;\nlet counter = 0;\n\n// Regex patterns\nconst regexLoc = /<loc>(.*?)<\\/loc>/gi; // XML sitemap <loc>...</loc>\nconst regexHref = /<a\\s+(?:[^>]*?\\s+)?href=\"([^\"]*)\"/gi; // HTML <a href=\"...\">\n\n// Try to detect whether this looks like a sitemap\nconst looksLikeSitemap =\n  xmlData.includes('<urlset') ||\n  xmlData.includes('<sitemapindex') ||\n  xmlData.match(regexLoc);\n\n// Use appropriate regex depending on content\nconst activeRegex = looksLikeSitemap ? regexLoc : regexHref;\n\nwhile ((matches = activeRegex.exec(xmlData)) !== null) {\n  // Extract link (group 1 in regex)\n  const link = matches[1].trim();\n\n  // Skip empty or junk links\n  if (!link || link.startsWith('#') || link.startsWith('javascript:')) continue;\n\n  results.push(link);\n  counter++;\n\n  if (counter >= maxLinks) break; // stop early if too many\n}\n\n// Return as a single JSON array\nreturn [\n  {\n    json: {\n      links: results\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        -144
      ],
      "id": "af18d813-83f3-478c-8a4f-3b280775e471",
      "name": "individual_link_extractor"
    },
    {
      "parameters": {
        "jsCode": "// --- Get filters from main_config ---\nconst keywords = $('sites_config').first().json.search_config.linkEtiquetteFilter || [];\nconst langFilter = $('sites_config').first().json.search_config.pageLanguage || [];\nconst banKeywords = $('sites_config').first().json.search_config.ban_filter || [];\n\n// --- Get input links array ---\nconst input = items[0].json;\nconst allLinks = input.links || [];\n\nconst filteredLinks = [];\n\nfor (const rawLink of allLinks) {\n    const link = rawLink.toLowerCase();\n\n    let passLang = false;\n    let passKeyword = false;\n    let passBan = true; // assume the link passes unless banned\n\n    // --- Check language filter ---\n    for (const lang of langFilter) {\n        if (link.includes(lang.toLowerCase())) {\n            passLang = true;\n            break;\n        }\n    }\n\n    // --- Check required keyword filter ---\n    for (const kword of keywords) {\n        if (link.includes(kword.toLowerCase())) {\n            passKeyword = true;\n            break;\n        }\n    }\n\n    // --- Check banned keywords ---\n    for (const banned of banKeywords) {\n        if (link.includes(banned.toLowerCase())) {\n            passBan = false; // fail the ban check\n            break;\n        }\n    }\n\n    // --- Keep only if passes language + keyword filters AND not banned ---\n    if (passLang && passKeyword && passBan) {\n        filteredLinks.push(rawLink);\n    }\n}\n\n// --- Return as a single object with filtered results ---\nreturn [\n  {\n    json: {\n      filteredLinks: filteredLinks\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        -144
      ],
      "id": "455c5859-d023-454c-9eb6-c32a8c4268d2",
      "name": "filterer"
    },
    {
      "parameters": {
        "jsCode": "// Process each input item\nreturn items.map(item => {\n  const links = item.filteredLinks || item.json?.filteredLinks || [];\n  \n  const results = links.map(url => {\n    // Match any link ending with /job-offers/<uuid>-<slug>\n    const match = url.match(/\\/job-offers\\/[0-9a-fA-F-]+-(.+)/);\n    if (!match) {\n      return { link: url, company: null, job_title: null };\n    }\n\n    const remaining = match[1];\n    const parts = remaining.split('-');\n\n    // Heuristic: guess company name (first 1–3 words before typical job keywords)\n    let company = parts[0];\n    let i;\n    for (i = 1; i < Math.min(3, parts.length); i++) {\n      if (\n        !$('sites_config').first().json.search_config.search_keywords.includes(parts[i].toLowerCase())\n      ) {\n        company += ' ' + parts[i];\n      } else {\n        break;\n      }\n    }\n\n    // Job title = everything after company-related words\n    const job_title = parts.slice(i).join(' ').replace(/-/g, ' ');\n\n    // Clean formatting\n    const format = text =>\n      text\n        ? text.charAt(0).toUpperCase() + text.slice(1)\n        : null;\n\n    return {\n      link: url,\n      company: format(company),\n      job_title: format(job_title)\n    };\n  });\n\n  // Return structured array\n  return { json: { jobs: results } };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        -144
      ],
      "id": "fc7864ea-bb93-4d9f-b298-6d4379bd5178",
      "name": "organizer"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "jobLink",
              "cssSelector": "li.list__item h3 a",
              "returnValue": "attribute",
              "attribute": "href",
              "returnArray": true
            },
            {
              "key": "jobTitle",
              "cssSelector": "li.list__item h3 a",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        128,
        256
      ],
      "id": "d6c44305-0570-4e7d-ba29-f1b5e99fd232",
      "name": "HTML handler",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const baseURL = $('main_config').first().json.sites[1].baseUrl;\nlet results = [];\n\nitems.forEach(item => {\n  // Ensure jobLink is an array\n  let links = item.json.jobLink;\n  if (!Array.isArray(links)) links = [links];\n\n  // Ensure jobTitle is an array (repeat first title if only one)\n  let titles = item.json.jobTitle;\n  if (!Array.isArray(titles)) titles = [titles];\n\n  links.forEach((link, index) => {\n    link = (link || '').trim();\n    const absoluteLink = link.startsWith('http') ? link : baseURL + link;\n\n    // Pick corresponding title if exists, else empty\n    const job_title = (titles[index] || titles[0] || '').trim();\n\n    if (absoluteLink) results.push({ json: { job_title, link: absoluteLink } });\n  });\n});\n\n// Deduplicate by link\nconst uniqueResults = [...new Map(results.map(r => [r.json.link, r.json])).values()];\n\nreturn uniqueResults.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        256
      ],
      "id": "69bb40cb-2851-4b10-b503-742531cec0a1",
      "name": "normalizator",
      "disabled": true
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -112,
        448
      ],
      "id": "a4c3b474-e88b-4fa9-8023-68ea4f3860c6",
      "name": "Wait",
      "webhookId": "ead751c7-5fe3-4b17-afbd-f21202ae9ca4",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "\nreturn $input.first();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        784
      ],
      "id": "cda9f14b-65d7-4459-b791-7a7ad049961d",
      "name": "one_link_tester",
      "retryOnFail": true,
      "waitBetweenTries": 200,
      "alwaysOutputData": true,
      "notesInFlow": true,
      "disabled": true,
      "notes": "DISABLE IN FINAL VERSION"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "={{ $('sites_config').item.json.sheet_config.doc_id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('sites_config').item.json.sheet_config.job_sheet_name }}",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1568,
        384
      ],
      "id": "de777332-a229-48b1-8b59-dcf647b68d14",
      "name": "Read sheet",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 200,
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "q4vmTwnNZDxKNiIp",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Debug: Show current sheet data\nconst sheetData = items;\n\nconsole.log('Total rows in sheet:', sheetData.length);\n\n// Show first few rows\nsheetData.slice(0, 5).forEach((row, index) => {\n  console.log(`Row ${index}:`, row.json);\n});\n\n// Extract existing links (skip header row)\nconst existingLinks = new Set();\nsheetData.slice(1).forEach(row => {\n  if (row.json && row.json[2]) { // Column C (link)\n    existingLinks.add(row.json[2]);\n  }\n});\n\nconsole.log('Existing links count:', existingLinks.size);\nconsole.log('First 3 existing links:', Array.from(existingLinks).slice(0, 3));\n\nreturn [{\n  json: {\n    totalRows: sheetData.length,\n    existingLinksCount: existingLinks.size,\n    sampleData: sheetData.slice(0, 3).map(row => row.json),\n    existingLinks: Array.from(existingLinks).slice(0, 10) // First 10 links\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        384
      ],
      "id": "82675d41-4433-47f1-854b-f75d911bd851",
      "name": "read_sheet"
    },
    {
      "parameters": {
        "jsCode": "// Get existing data from Google Sheets\nconst existingData = $('Read sheet').all();\nconst existingLinks = new Set();\n\n// Extract existing links - your data uses .link property, not array index\nexistingData.forEach(row => {\n  if (row.json && row.json.link) {\n    existingLinks.add(row.json.link);\n  }\n});\n\n// Get new jobs from your organizer\nconst allJobs = $('organizer').first().json.jobs || [];\n\n// Filter out duplicates\nconst newJobs = allJobs.filter(job => !existingLinks.has(job.link));\n\nconsole.log(`Found ${allJobs.length} total jobs, ${existingLinks.size} existing, ${newJobs.length} new`);\n\n// Return new jobs as objects (maps) instead of arrays\nreturn newJobs.map(job => ({\n  json: {\n    company: job.company || '',\n    job_title: job.job_title || '',\n    link: job.link || ''\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        384
      ],
      "id": "583b47da-7874-4c04-969b-442562620b61",
      "name": "unique_filterer"
    },
    {
      "parameters": {
        "jsCode": "// Convert job objects to individual items for Google Sheets\nconst jobItems = items; // Your filtered job objects\n\nif (jobItems.length === 0) {\n  return [{\n    json: {\n      message: \"No new jobs to add to Google Sheets\",\n      skipGoogleSheets: true\n    }\n  }];\n}\n\n// Get sheet configuration\nconst docId = $('sites_config').first().json.sheet_config?.doc_id || '1cXb9E8SRLSZtvHrQfuuY6RPuAfaH0AQBmMsGK7rZxn4';\nconst sheetName = $('sites_config').first().json.sheet_config?.job_sheet_name || 'Hoja 1';\n\n// Return each job as a separate item for individual processing\nreturn jobItems.map(item => ({\n  json: {\n    company: item.json.company || '',\n    job_title: item.json.job_title || '',\n    link: item.json.link || '',\n    docId: docId,\n    sheetName: sheetName\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2192,
        384
      ],
      "id": "c6f653aa-5680-46f2-aec1-a76bffb0ab71",
      "name": "array_maker"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $json.docId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $json.sheetName }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "company": "={{ $json.company }}",
            "job_title": "={{ $json.job_title }}",
            "link": "={{ $json.link }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "job_title",
              "displayName": "job_title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        2608,
        480
      ],
      "id": "df276da2-9142-46ec-95d3-f878c3e92a35",
      "name": "write in sheet",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "q4vmTwnNZDxKNiIp",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2400,
        384
      ],
      "id": "254df81e-bfaa-4f92-bf28-f070f650f822",
      "name": "Loop over jobs",
      "retryOnFail": true,
      "waitBetweenTries": 200,
      "alwaysOutputData": true
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "job_listing_extractor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pair_web_keyword": {
      "main": [
        [
          {
            "node": "one_link_tester",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "sites_config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sites_config": {
      "main": [
        [
          {
            "node": "seggregated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "seggregated": {
      "main": [
        [
          {
            "node": "If allowed to",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If allowed to": {
      "main": [
        [
          {
            "node": "search_maker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "pair_web_keyword",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search_maker": {
      "main": [
        [
          {
            "node": "splitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "splitter": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request sitemap": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop": {
      "main": [
        [
          {
            "node": "If xml or no",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Request sitemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If xml or no": {
      "main": [
        [
          {
            "node": "XML to JSON1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTML handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XML to JSON1": {
      "main": [
        [
          {
            "node": "job_sitemap_extractor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "job_sitemap_extractor1": {
      "main": [
        [
          {
            "node": "Loop1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop1": {
      "main": [
        [
          {
            "node": "individual_link_extractor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Loop1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "individual_link_extractor": {
      "main": [
        [
          {
            "node": "filterer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filterer": {
      "main": [
        [
          {
            "node": "organizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML handler": {
      "main": [
        [
          {
            "node": "normalizator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "one_link_tester": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "organizer": {
      "main": [
        [
          {
            "node": "Read sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read sheet": {
      "main": [
        [
          {
            "node": "read_sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "read_sheet": {
      "main": [
        [
          {
            "node": "unique_filterer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "unique_filterer": {
      "main": [
        [
          {
            "node": "array_maker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalizator": {
      "main": [
        [
          {
            "node": "Read sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "job_listing_extractor": {
      "main": [
        [
          {
            "node": "Read sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "array_maker": {
      "main": [
        [
          {
            "node": "Loop over jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over jobs": {
      "main": [
        [],
        [
          {
            "node": "write in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "write in sheet": {
      "main": [
        [
          {
            "node": "Loop over jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1fd9d127-d5f8-497d-9683-9a8882f27d0b",
  "meta": {
    "instanceId": "7689b2d292c0781d20ceefaa84bdcd9885638f03916f0bd47506d5dc7d5acfe2"
  },
  "id": "IrGbCm6ZACaXp74Z",
  "tags": []
}